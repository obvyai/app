name: Infrastructure Apply

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - stage
          - prod
      confirm:
        description: 'Type "apply" to confirm deployment'
        required: true
        type: string

permissions:
  id-token: write
  contents: read

env:
  TF_VERSION: '1.8.0'
  AWS_REGION: us-east-1

jobs:
  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Validate confirmation
        if: github.event.inputs.confirm != 'apply'
        run: |
          echo "❌ Deployment not confirmed. Please type 'apply' to confirm."
          exit 1

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: terraform-apply-${{ github.event.inputs.environment }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: |
          cd infra/terraform
          terraform init -backend-config="key=obvy-imggen/${{ github.event.inputs.environment }}/terraform.tfstate"

      - name: Terraform Workspace
        run: |
          cd infra/terraform
          terraform workspace select ${{ github.event.inputs.environment }} || terraform workspace new ${{ github.event.inputs.environment }}

      - name: Terraform Plan
        run: |
          cd infra/terraform
          terraform plan -var-file="environments/${{ github.event.inputs.environment }}.tfvars" -out="${{ github.event.inputs.environment }}.tfplan"

      - name: Terraform Apply
        run: |
          cd infra/terraform
          terraform apply "${{ github.event.inputs.environment }}.tfplan"

      - name: Output Infrastructure Details
        run: |
          cd infra/terraform
          echo "## 🚀 Infrastructure Deployed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Region:** ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Key Outputs" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          terraform output -json | jq -r 'to_entries[] | "- **\(.key):** \(.value.value)"' >> $GITHUB_STEP_SUMMARY

      - name: Notify on failure
        if: failure()
        run: |
          echo "## ❌ Infrastructure Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Region:** ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please check the logs above for error details." >> $GITHUB_STEP_SUMMARY
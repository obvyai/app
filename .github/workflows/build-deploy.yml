name: Build and Deploy

on:
  push:
    branches: [main]
    paths:
      - 'services/**'
      - 'apps/**'
      - 'packages/**'
      - '.github/workflows/build-deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - stage
          - prod

permissions:
  id-token: write
  contents: read

env:
  NODE_VERSION: '20'
  AWS_REGION: us-east-1

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Type check
        run: npm run typecheck

      - name: Unit tests
        run: npm run test

      - name: Integration tests
        run: npm run test:integration

  build-api:
    name: Build API Services
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build API services
        run: |
          cd services/api
          npm run build

      - name: Build worker services
        run: |
          cd services/worker
          npm run build

      - name: Upload API artifacts
        uses: actions/upload-artifact@v4
        with:
          name: api-dist
          path: |
            services/api/dist/
            services/worker/dist/
          retention-days: 1

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build shared packages
        run: npm run build:shared

      - name: Build frontend
        run: |
          cd apps/web
          npm run build
        env:
          NEXT_PUBLIC_API_BASE_URL: ${{ vars.API_BASE_URL }}
          NEXT_PUBLIC_AWS_REGION: ${{ env.AWS_REGION }}
          NEXT_PUBLIC_COGNITO_USER_POOL_ID: ${{ vars.COGNITO_USER_POOL_ID }}
          NEXT_PUBLIC_COGNITO_USER_POOL_CLIENT_ID: ${{ vars.COGNITO_USER_POOL_CLIENT_ID }}
          NEXT_PUBLIC_COGNITO_IDENTITY_POOL_ID: ${{ vars.COGNITO_IDENTITY_POOL_ID }}
          NEXT_PUBLIC_COGNITO_DOMAIN: ${{ vars.COGNITO_DOMAIN }}

      - name: Upload frontend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: apps/web/out/
          retention-days: 1

  deploy-api:
    name: Deploy API Services
    runs-on: ubuntu-latest
    needs: [build-api]
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download API artifacts
        uses: actions/download-artifact@v4
        with:
          name: api-dist
          path: dist/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: deploy-api-${{ github.event.inputs.environment || 'dev' }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.8.0'

      - name: Deploy Lambda functions
        run: |
          cd infra/terraform
          terraform init -backend-config="key=obvy-imggen/${{ github.event.inputs.environment || 'dev' }}/terraform.tfstate"
          terraform workspace select ${{ github.event.inputs.environment || 'dev' }}
          
          # Update Lambda functions with new code
          terraform apply -target=module.api -var-file="environments/${{ github.event.inputs.environment || 'dev' }}.tfvars" -auto-approve

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: [build-frontend]
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend-dist/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: deploy-frontend-${{ github.event.inputs.environment || 'dev' }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get S3 bucket name
        id: get-bucket
        run: |
          cd infra/terraform
          terraform init -backend-config="key=obvy-imggen/${{ github.event.inputs.environment || 'dev' }}/terraform.tfstate"
          terraform workspace select ${{ github.event.inputs.environment || 'dev' }}
          BUCKET_NAME=$(terraform output -raw frontend_bucket_name)
          CLOUDFRONT_ID=$(terraform output -raw cloudfront_distribution_id)
          echo "bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT
          echo "cloudfront_id=$CLOUDFRONT_ID" >> $GITHUB_OUTPUT

      - name: Sync to S3
        run: |
          aws s3 sync frontend-dist/ s3://${{ steps.get-bucket.outputs.bucket_name }} --delete

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ steps.get-bucket.outputs.cloudfront_id }} --paths "/*"

      - name: Output deployment info
        run: |
          echo "## ðŸš€ Frontend Deployed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment || 'dev' }}" >> $GITHUB_STEP_SUMMARY
          echo "**S3 Bucket:** ${{ steps.get-bucket.outputs.bucket_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**CloudFront Distribution:** ${{ steps.get-bucket.outputs.cloudfront_id }}" >> $GITHUB_STEP_SUMMARY

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [deploy-api, deploy-frontend]
    if: github.event.inputs.environment == 'dev' || github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run E2E tests
        run: |
          cd apps/web
          npm run test:e2e
        env:
          PLAYWRIGHT_BASE_URL: ${{ vars.FRONTEND_URL }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: apps/web/playwright-report/
          retention-days: 7